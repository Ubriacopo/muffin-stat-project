{"trial_id": "03", "hyperparameters": {"space": [{"class_name": "Choice", "config": {"name": "batch_size", "default": 16, "conditions": [], "values": [8, 16, 32, 64], "ordered": true}}, {"class_name": "Float", "config": {"name": "lr", "default": 1e-05, "conditions": [], "min_value": 1e-05, "max_value": 0.01, "step": 2, "sampling": "log"}}, {"class_name": "Float", "config": {"name": "momentum", "default": 0.5, "conditions": [], "min_value": 0.5, "max_value": 1.0, "step": 0.05, "sampling": "linear"}}], "values": {"batch_size": 64, "lr": 2e-05, "momentum": 0.8500000000000001}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/keras_tuner/src/engine/base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/keras_tuner/src/engine/base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jacopo/PycharmProjects/muffin-stat-project/utils/my_tuner.py\", line 20, in run_trial\n    return super().run_trial(trial, *args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jacopo/PycharmProjects/muffin-stat-project/models/structure/tunable_hypermodel.py\", line 51, in fit\n    return model.fit(*args, batch_size=hp.Choice(\"batch_size\", values=[8, 16, 32, 64]), **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/keras/src/utils/traceback_utils.py\", line 123, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/torch/_tensor.py\", line 522, in backward\n    torch.autograd.backward(\n  File \"/home/jacopo/miniconda3/envs/keras-pytorch/lib/python3.12/site-packages/torch/autograd/__init__.py\", line 266, in backward\n    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\ntorch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 784.00 MiB. GPU 0 has a total capacity of 7.75 GiB of which 783.31 MiB is free. Process 8478 has 1.76 GiB memory in use. Including non-PyTorch memory, this process has 3.29 GiB memory in use. Of the allocated memory 2.16 GiB is allocated by PyTorch, and 928.13 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)\n"}